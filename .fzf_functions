# FZF Functions
# https://github.com/junegunn/fzf/wiki/examples


# Help
## Back slash after the end of the string
alias fzh='echo "$FZHELP"'
FZHELP=' fd: recursive change directory\n fdw: change to working directory\n fo: open file\n fow: open file from working directory\n fmd: read file inline in MarkDown\n fa: recursively open file in atom\n fmw: move file recursively to working directory\n fmr: move file recursively within directory\n fmk: move file to common Kitob Khona directory\n fzc: search within file content recursively\n ftf: create and open new file in working directory\n fh: command line history'

# Fuzzy Change Directory (only within directories situated recursively below current context)
fd() {
  local dir
  dir=$(find . -type d | fzf) &&
  cd "$dir" && ls -a
}

# Fuzzy Change Directory (from common working directory)
fdw() {
  local dir
  dir=$(find "${DROP}/Active_Directories/Publications" "${DROP}/Active_Directories/Personal" $LANG $REF $NOTES $TEACH $PROF $ADMIN $PROJ -type d | fzf) &&
  cd "$dir" && ls -a
}


# Fuzzy Open File (only files nested recursively within current context)
fo() {
  local file
  file=$(find . -type f | fzf --preview 'cat {}' --delimiter / --with-nth -1) &&
  open "$file"
}

# Fuzzy Open File (from common working directory)
fow() {
  local file
  file=$(find "${DROP}/Active_Directories/Publications" "${DROP}/Active_Directories/Personal" $LANG $TEACH $NOTES $PROF $ADMIN $PROJ -type f | fzf --preview 'cat {}' --delimiter / --with-nth -1) &&
  open "$file"
}


# Fuzzy Open File in Atom (only files nested recursively within current context)
fa() {
  local file
  file=$(find . -type f | fzf --preview 'cat {}') &&
  a "$file"
}


# Fuzzy read MarkDown file in MDLess
fmd() {
  local file
  file=$(find . -type f | fzf --preview 'cat {}') &&
  mdless "$file"
}


# Fuzzy Move File to Common Working Directories
fmw() {
  local file
  file=$(find . -type f | fzf -m --preview 'cat {}') &&
  local dir
  dir=$(find "${DROP}/Active_Directories/Publications" "${DROP}/Active_Directories/Personal" $REF $TEACH $LANG $PROF $ADMIN $PROJ $NOTES "${DROP}/Active_Directories/Publications" "${DROP}/Active_Directories/Reference" "${DROP}/Cloud_Directories/Life_Noise" -type d | fzf)
  echo "$file" | gxargs -n 1 -d "\n" -I "{}" mv "{}" "$dir"
}

# Fuzzy Move File to Common Kitob Khona directories
fmk() {
  local file
  file=$(find . -type f | fzf --preview 'cat {}') &&
  local dir
  dir=$(find "${KITOB}/Secondary_Works/Pickett Library" "${KITOB}/Secondary_Works/Unsorted Secondary Literature" "${KITOB}/Primary_Sources" -type d | fzf)
  mv "$file" "$dir"
}


# Fuzzy Move File (recursively within directory)
fmr() {
  local file
  file=$(find . -type f | fzf -m --preview 'cat {}') &&
  local dir
  dir=$(find . -type d | fzf)
  echo "$file" | gxargs -n 1 -d "\n" -I "{}" mv "{}" "$dir"
}


# Fuzzy search file contents (current folder)
## bug: currently this only works if there are no spaces in the filename
fzc() {
  local line
  local file
  line=$(ag . * | fzf --preview 'echo {} | cut -d : -f 1 | xargs cat' --delimiter / --with-nth -1)
  file=$(echo $line | cut -d : -f 1)
  open "$file"
}


f() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}



# Fuzzy Create File (in working folder)
ftf() {
  read "file?File name: "
  local dir
  dir=$(find "${LANG}" "${BOX}/Inbox" "${TEACH}" "${REF}" "${PROJ}" "${NOTES}" "${DROP}/Active_Directories/Publications" "${DROP}/Active_Directories/Personal" "${ADMIN}" ${PROF} -type d | fzf)
  touch "${dir}/${file}"
  open "${dir}/${file}"
}


# fh - repeat history
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}
